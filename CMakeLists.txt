cmake_minimum_required(VERSION 3.0.0)
project(jet)

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED on)

if (NOT CMAKE_BUILD_TYPE)
    message(STATUS "CMAKE_BUILD_TYPE not defined, defaulting to Debug build")
    set(CMAKE_BUILD_TYPE Debug)
endif()

if(WIN32)
    set(CMAKE_CXX_FLAGS "/W4 /EHsc /WX")
    set(CMAKE_CXX_FLAGS_DEBUG "/DEBUG /DDEBUG=1")
    set(CMAKE_CXX_FLAGS_RELEASE "/DNDEBUG=1 /Ox")
else()
    set(CMAKE_CXX_FLAGS "-Wall -Werror -Wextra -pedantic")
    set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -g -DDEBUG")
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -DNDEBUG")
endif()

if("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -O3")
    set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELEASE}" -g)
elseif("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -Ofast")
    set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "${CMAKE_CXX_FLAGS_RELEASE}" -g)
endif()

if (UBSAN)
    message(STATUS  "Compiling with undefined behavior sanitation")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fsanitize=address,memory,undefined,safe-stack -fno-sanitize-recover")
endif()

add_subdirectory(src)